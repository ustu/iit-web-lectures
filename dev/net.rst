.. web_programming documentation master file, created by
   sphinx-quickstart on Sun Mar 11 17:49:44 2012.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

****************
Сети и протоколы
****************

История развития Веб
====================

`<https://ru.wikipedia.org/wiki/Интернет>`_

Сети
====

World Wide Web (WWW, W3) — гипертекстовая (гипермедиа) система,
предназначенная для интеграции различных сетевых ресурсов в единое информационное
пространство. Всемирную паутину образуют миллионы веб-серверов сети Интернет,
расположенных по всему миру. Веб-сервер является программой, запускаемой на
подключённом к сети компьютере и использующей протокол HTTP для передачи данных.
В качестве клиента чаще всего выступает программа-браузер(Microsoft Internet Explorer,
Mozilla FireFox и другие). Клиент обращается по сети к серверу, который обрабатывает
запрос и возвращает ответ в виде HTML кода. Связь с сервером чаще всего
происходит посредством протокола HTTP через TCP/IP сети.

.. рисунок клиент-серверной архитектуры

Распределение протоколов по уровням модели TCP/IP

.. raw:: html

    <table>
    <tr>
        <td style="padding: 0 15px 0 0">4</td>
        <td style="border:1px solid red;padding: 20px 10px 20px;">Прикладной</td>
        <td style="padding: 0 0 0 10px">HTTP, FTP, DNS, Telnet, SSH</td>
    </tr>
    <tr>
        <td>3</td>
        <td style="border:1px solid red;padding: 20px 10px 20px;">Транспортный</td>
        <td style="padding: 0 0 0 10px">TCP, UDP</td>
    </tr>
    <tr>
        <td>2</td>
        <td style="border:1px solid red;padding: 20px 10px 20px;">Сетевой</td>
        <td style="padding: 0 0 0 10px">IP, ICMP</td>
    </tr>
    <tr>
        <td>1</td>
        <td style="border:1px solid red;padding: 20px 10px 20px;">Доступа к среде</td>
        <td style="padding: 0 0 0 10px">Ethernet, Token Ring, E1</td>
    </tr>
    </table>

В курсе Веб-программирования нас будут интересовать в основном протоколы 4-го
уровня модели TCP/IP. Остальные протоколы вы изучите на курсе "Каналы передачи
данных".

URI
===
**URI** — это символьная строка, позволяющая идентифицировать какой-либо ресурс: документ, изображение, файл, службу, ящик электронной почты и т. д.

| Структура URI:
| URI = URL + URN
| <схема>://<логн>:<пароль>@<хост>:<порт>/<URL-путь>?<параметры>#<якорь>
| http://vasya:Abyrvalg@example.com:8080/vasya/ftp/foto?id=2456&month=sept#large

**URL** — (англ. Uniform Resource Locator) это часть URI, которая определяет адрес хоста сетевого ресурса (для несетевых ресурсов эта часть может опускаться).

**URN** — (англ. Uniform Resource Name), это часть URI, которая определяет имя ресурса на хосте в локальном пространстве имён (и, соответственно, в определённом контексте).

URI может содержать только латинские символы и то не все из ASCII таблицы. Весь
текст не в латинице кодируется в UTF-8
(http://ru.wikipedia.org/wiki/%D0%9C%D0%B8%D0%BA%D1%80%D0%BE). Эту проблему
хотят решить при помощи нового стандарта IRI.

**Относительные и абсолютные ссылки:**

`<http://htmlbook.ru/samhtml/ssylki/absolyutnye-i-otnositelnye-ssylki>`_


Протокол HTTP
=============
| **HTTP**  (сокр. от англ. HyperText Transfer Prоtocоl — «протокол передачи гипертекста») — протокол прикладного уровня передачи данных (изначально — в виде гипертекстовых документов). Основой HTTP является технология «клиент-сервер», то есть предполагается существование потребителей (клиентов), которые инициируют соединение и посылают запрос, и поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом. HTTP в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов. Обмен сообщениями идёт по обыкновенной схеме «запрос-ответ». Для идентификации ресурсов HTTP использует глобальные URI. В отличие от многих других протоколов, HTTP не сохраняет своего состояния. Это означает отсутствие сохранения промежуточного состояния между парами «запрос-ответ».

Всё программное обеспечение для работы с протоколом HTTP разделяется на три большие категории:

* Серверы как основные поставщики услуг хранения и обработки информации (обработка запросов);
* Клиенты — конечные потребители услуг сервера (отправка запроса);
* Прокси для выполнения транспортных служб.

| **Клиенты**: Microsoft Internet Explorer, Mozilla FireFox
| **Серверы**: Apache, Nginx
| **Прокси**: Squid, Nginx

Первая версия протокола HTTP/0.9, текущая HTTP/1.1 принята в июне 1999 года.

**Структура протокола**

Каждое HTTP-сообщение состоит из трёх частей, которые передаются в указанном порядке:

* Стартовая строка (англ. Starting line) — определяет тип сообщения;
* Заголовки (англ. Headers) — характеризуют тело сообщения, параметры передачи и прочие сведения;
* Тело сообщения (англ. Message Body) — непосредственно данные сообщения. Обязательно должно отделяться от заголовков пустой строкой.

Заголовки и тело сообщения могут отсутствовать, но стартовая строка является обязательным элементом, так как указывает на тип запроса/ответа. Исключением является версия 0.9 протокола, у которой сообщение запроса содержит только стартовую строку, а сообщения ответа только тело сообщения.

**Стартовая строка**

Стартовые строки различаются для запроса и ответа. Строка запроса выглядит так:

    GET URI — для версии протокола 0.9.
    Метод URI HTTP/Версия — для остальных версий.

Здесь:

    Метод (англ. Method) — название запроса, одно слово заглавными буквами. В версии HTTP 0.9 использовался только метод GET, список запросов для версии 1.1 представлен ниже.
    URI определяет путь к запрашиваемому документу.
    Версия (англ. Version) — пара разделённых точкой арабских цифр. Например: 1.0.

Чтобы запросить страницу данной статьи, клиент должен передать строку:

    GET /wiki/HTTP HTTP/1.0

Стартовая строка ответа сервера имеет следующий формат:

    HTTP/Версия КодСостояния Пояснение

Здесь:

* Версия — пара разделённых точкой арабских цифр как в запросе.
* КодСостояния (англ. Status Code) — три арабские цифры. По коду статуса определяется дальнейшее содержимое сообщения и поведение клиента.
* Пояснение (англ. Reason Phrase) — текстовое короткое пояснение к коду ответа для пользователя. Никак не влияет на сообщение и является необязательным.

Например, на предыдущий наш запрос клиентом данной страницы сервер ответил строкой:

    HTTP/1.0 200 OK

**Методы**

Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. Обычно метод представляет собой короткое английское слово, записанное заглавными буквами. Обратите внимание, что название метода чувствительно к регистру.

Каждый сервер обязан поддерживать как минимум методы GET и HEAD. Если сервер не распознал указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented). Если серверу метод известен, но он неприменим к конкретному ресурсу, то возвращается сообщение с кодом 405 (Method Not Allowed). В обоих случаях серверу следует включить в сообщение ответа заголовок Allow со списком поддерживаемых методов.

Кроме методов GET и HEAD, часто применяется метод POST.

**GET**

Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.

Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»:
GET /path/resource?param1=value1&param2=value2 HTTP/1.1

**HEAD**

Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.

**POST**

Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с помощью метода POST обычно загружаются файлы на сервер.

В отличие от метода GET, метод POST не считается идемпотентным, то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться одна копия этого комментария).

При результатах выполнения 200 (Ok) и 204 (No Content) в тело ответа следует включить сообщение об итоге выполнения запроса. Если был создан ресурс, то серверу следует вернуть ответ 201 (Created) с указанием URI нового ресурса в заголовке Location.

**PUT**

Применяется для загрузки содержимого запроса на указанный в запросе URI. Если по заданному URI не существовало ресурса, то сервер создаёт его и возвращает статус 201 (Created). Если же был изменён ресурс, то сервер возвращает 200 (Ok) или 204 (No Content). Сервер не должен игнорировать некорректные заголовки Content-* передаваемые клиентом вместе с сообщением. Если какой-то из этих заголовков не может быть распознан или не допустим при текущих условиях, то необходимо вернуть код ошибки 501 (Not Implemented).

Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.

**PATCH**

Аналогично PUT, но применяется только к фрагменту ресурса.

**DELETE**

Удаляет указанный ресурс.

**TRACE**

Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.

**LINK**

Устанавливает связь указанного ресурса с другими.

**UNLINK**

Убирает связь указанного ресурса с другими.

**CONNECT**

Преобразует соединение запроса в прозрачный TCP/IP туннель, обычно чтобы содействовать установлению защищенного SSL соединения через не шифрованный прокси.

**Коды состояния**

Код состояния является частью первой строки ответа сервера. Он представляет собой целое число из трех арабских цифр. Первая цифра указывает на класс состояния. За кодом ответа обычно следует отделённая пробелом поясняющая фраза на английском языке, которая разъясняет человеку причину именно такого ответа.

Примеры:

| 201 Webpage Created
| 403 Access allowed only for registered users
| 507 Insufficient Storage

В настоящее время выделено пять классов кодов состояния:

* 1xx Informational (Информационный)
    В этот класс выделены коды, информирующие о процессе передачи. В HTTP/1.0 сообщения с такими кодами должны игнорироваться. В HTTP/1.1 клиент должен быть готов принять этот класс сообщений как обычный ответ, но ничего отправлять серверу не нужно. Сами сообщения от сервера содержат только стартовую строку ответа и, если требуется, несколько специфичных для ответа полей заголовка. Прокси-серверы подобные сообщения должны отправлять дальше от сервера к клиенту.

* 2xx Success (Успех)
    Сообщения данного класса информируют о случаях успешного принятия и обработки запроса клиента. В зависимости от статуса сервер может ещё передать заголовки и тело сообщения.

* 3xx Redirection (Перенаправление)
    Коды класса 3xx сообщают клиенту что для успешного выполнения операции необходимо сделать другой запрос (как правило по другому URI). Из данного класса пять кодов 301, 302, 303, 305 и 307 относятся непосредственно к перенаправлениям (жарг. редирект). Адрес, по которому клиенту следует произвести запрос, сервер указывает в заголовке Location. При этом допускается использование фрагментов в целевом URI.

* 4xx Client Error (Ошибка клиента)
    Класс кодов 4xx предназначен для указания ошибок со стороны клиента. При использовании всех методов, кроме HEAD, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.

    Для запоминания значений кодов с 400 по 417 существуют приёмы иллюстративной мнемотехники[5]

* 5xx Server Error (Ошибка сервера)
    Коды 5xx выделены под случаи неудачного выполнения операции по вине сервера. Для всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело сообщения объяснение, которое клиент отобразит пользователю. 

**Заголовки**

Заголовки HTTP (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие
разделённую двоеточием пару параметр-значение. Формат заголовков соответствует
общему формату заголовков текстовых сетевых сообщений ARPA (см. RFC 822).
Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.

Примеры заголовков:

| Server: Apache/2.2.11 (Win32) PHP/5.3.0
| Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
| Content-Type: text/plain; charset=windows-1251
| Content-Language: ru

В примере выше каждая строка представляет собой один заголовок. При этом то, что находится до первого двоеточия, называется именем (name), а что после неё — значением (value).


Все заголовки разделяются на четыре основных группы:

* General Headers (Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
* Request Headers (Заголовки запроса) — используются только в запросах клиента.
* Response Headers (Заголовки ответа) — только для ответов от сервера.
* Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.

**Тело сообщения**

Тело HTTP сообщения (message-body), если оно присутствует, используется для передачи тела объекта, связанного с запросом или ответом. 

Вопросы?
--------

**В каких случаях используется метод POST, а в каких GET?**

`<http://phpfaq.ru/na_tanke#http>`_

``Определить, какой способ следует применять, очень просто. Если форма служит
для запроса некой информации, например - при поиске, то ее следует отправлять
методом GET. Чтобы можно было обновлять страницу, можно было поставить закладку
и или послать ссылку другу.
Если же в результате отправки формы данные записываются или изменяются на
сервере, то следует их отправлять методом POST, причем обязательно после
обработки формы надо перенаправить браузер методом GET. Так же, POST может
понадобиться, если на сервер надо передать большой объём данных (у GET он
сильно ограничен), а так же, если не следует "светить" передаваемые данные в
адресной строке (при вводе логина и пароля, например).``

.. raw:: html

    <iframe src="https://docs.google.com/spreadsheet/embeddedform?formkey=dHo2MmpkOGZiQVRhaWQ4dk9uUnF2dWc6MQ" width="760" height="389" frameborder="0" marginheight="0" marginwidth="0">Загрузка...</iframe>

Закрепление материала
---------------------
**Задание 1**

Создать папку myproject, в ней созать папку about. В папке about создать
aboutme.html. В папке myproject создать файл index.html. В файле index.html
создать 2 ссылки с прямым и абсолютным обращением к aboutme.html. В файле
aboutme.html создать такие же ссылки на файл index.html.

**Задание 2**

Подключиться по telnet к wikipedia.org и отправить запрос:

| GET /wiki/страница HTTP/1.1
| Host: ru.wikipedia.org
| User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509
| Firefox/3.0b5
| Accept: text/html
| Connection: close
| (пустая строка)

Проанализировать ответ сервера.

**Задание 3**

Отправить запрос аналогичный заданию 2, но на адрес
http://19216801.ru/common/redirection

Проанализировать ответ и код состояния.

.. _hw1:

Домашнее задание
----------------


**Задание 1**

Создать HTML форму c action="http://19216801.ru/echo" method="POST" и
enctype="multipart/form-data"
Добавить в форму поля firstname, lastname, group, message (textarea), myimg (file).

Проверить результат отправки данных формы.

Ресурсы
-------
HTTP протокол:

* `<http://angel07.webservis.ru/internet/http.html>`_
* `<https://ru.wikipedia.org/wiki/HTTP>`_

| URI `<https://ru.wikipedia.org/wiki/URI>`_
| TCP/IP `<https://ru.wikipedia.org/wiki/TCP/IP>`_

В помощь к ДЗ `<http://hurl.quickblox.com./>`_
